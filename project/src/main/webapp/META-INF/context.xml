<?xml version="1.0" encoding="euc-kr"?>

<Context>
<Resource
name = "jdbc/OracleDB"
auth = "Container"
type = "javax.sql.DataSource"
username = "team1"
password = "1234"
driverClassName = "oracle.jdbc.driver.OracleDriver"
factory= "org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory"
url = "jdbc:oracle:thin:@175.192.130.123:1521:xe"
/>
</Context>

<!--  
url = "jdbc:oracle:thin:@127.0.0.1:1521:xe"
password = "TIGER"
url = "jdbc:oracle:thin:@175.192.130.123:1521:xe"
url = "jdbc:oracle:thin:@192.168.0.21:1521:xe" >> 서버 터져쓸 때 학
password = "tiger"
1. name = "jdbc/OracleDB"
	JNDI로 호출될 이름을 설정하는 곳으로 임의로 이름 설정 가능합니다.
	dbcpAPITest.jsp의 init.lookup("java:comp/env/jdbc/OracleDB");
	lookup()메서드로 여기서 설정한 이름을 찾습니다.
	
2. auth = "Container"
	DBCP를 관리할 관리자 (Container or Application)로 컨테이너인 톰캣이 관리합니다.
	
3. type = "javax.sql.DataSource" 
	1번 resource의 return type이 DataSource라는 의미이며 Connection 객체를 반환할 수 있습니다.
	예) DataSource ds = (DataSource) init.lookup("java:comp/env/jdbc/OracleDB");
	
4. username = "scott" (DB의 계정명)

5. password = "tiger" (계정에 대한 비밀번호)

6. driverClasName = "oracle.jdbc.driver.OracleDriver"
	오라클 드라이버 이름 (JDBC를 이용하기 위한 드라이버 클래스 입니다.)
	
7. factory= = "ort.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory"
	dbcp를 관리하는 클래스로 Factory 클래스를 이용하면 좀 더 안정적으로 관리할 수 있습니다.
	
8. url = "jdbc: oracle:thin:@127.0.0.1:1521:xe"
	DB의 접속 URL입니다.
	-->
